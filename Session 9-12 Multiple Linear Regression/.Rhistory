#
#***********************************************************
scree.cov <- ggscreeplot(xdmgnd.pca)
scree.cov$var
scree.cov$plot
# Cumulative variance
cum.cov <- cumplot(xdmgnd.pca)
cum.cov$cumvar
cum.cov$plot
#***********************************************************
#
#		Loadings plots
#
#***********************************************************
# Loadings in the first 2 PCs
loadplot.cov <- loadingsplot(xdmgnd.pca)
loadplot.cov$loadings
loadplot.cov$plot
#***********************************************************
#
#		Principal Components with the Correlation Matrix
#
#***********************************************************
# Principal Components with the Correlation Matrix
xdmgnd.pca.corr <- prcomp(xdmgnd[,c("CARSDMG","EQPDMG", "TRKDMG","ACCDMG", "TOTKLD", "TOTINJ")], scale = T)
#***********************************************************
#
#		Biplot Comparison
#
#***********************************************************
# View data in the first 2 PCs
par(mfrow=c(1,2))
biplot(xdmgnd.pca, main="Biplot with Covariance Matrix")
biplot(xdmgnd.pca.corr, main="Biplot with Correlation Matrix")
par(mfrow=c(1,1))
# With ggbiplot
cov_biplot <- ggbiplot(xdmgnd.pca, varname.size = 5,
labels=row(xdmgnd[-c(5843,5289,5844,5282),])[,1])
corr_biplot <- ggbiplot(xdmgnd.pca.corr, varname.size = 5, labels=row(xdmgnd)[,1])
ggarrange(cov_biplot, corr_biplot, ncol=2, nrow=1)
# Just variable vectors
cov_biplot <- ggbiplot(xdmgnd.pca, varname.size = 5,
labels=row(xdmgnd[-c(5843,5289,5844,5282),])[,1],
plot.obs=FALSE, xlim=c(-0.3,2), ylim=c(-0.7,0.7))
corr_biplot <- ggbiplot(xdmgnd.pca.corr, varname.size = 5, labels=row(xdmgnd)[,1],
plot.obs=FALSE, xlim=c(-0.3,2.5), ylim=c(-1.5,2))
ggarrange(cov_biplot, corr_biplot, ncol=2, nrow=1)
#***********************************************************
#
#		Scree plot and cumulative variance comparison
#
#***********************************************************
cov_scree <- ggscreeplot(xdmgnd.pca)
corr_scree <- ggscreeplot(xdmgnd.pca.corr)
corr_scree$var
ggarrange(cov_scree$plot, corr_scree$plot, ncol=2, nrow=1)
# Cumulative variance
cov_cumsum <- cumplot(xdmgnd.pca)
corr_cumsum <- cumplot(xdmgnd.pca.corr)
corr_cumsum$cumvar
ggarrange(cov_cumsum$plot, corr_cumsum$plot, ncol=2, nrow=1)
#***********************************************************
#
#		Loadings plots comparison
#
#***********************************************************
loadplot.corr <- loadingsplot(xdmgnd.pca.corr)
loadplot.corr$loadings
ggarrange(loadplot.cov$plot, loadplot.corr$plot, ncol=2, nrow=1)
# 1st column is when using covariance matrix, 2nd when using correlation matrix
#***********************************************************
#
#		Possible predictors of damage
#
#***********************************************************
# SPM
pairs.panels(xdmgnd[,c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")])
# PCA
pred.pca <- prcomp(xdmgnd[,c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")], scale = T )
biplot(pred.pca)
ggbiplot(pred.pca, varname.size = 5, labels=row(xdmgnd)[,1])
# Remove outlier
pred.pca <- prcomp(xdmgnd[-c(5289),c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")], scale = T )
biplot(pred.pca)
# gg biplot
ggbiplot(pred.pca, varname.size = 5, labels=row(xdmgnd[-c(5289),])[,1])
#
#
#	 Multiple Linear Regression 1
#
#******************************************************
##load data
sourcedir <- "C:/Users/jgh6ds/Desktop/Independent/Session 9-12 Multiple Linear Regression"
setwd(sourcedir)
source("AccidentInput.R")
#load libraries
library(ggplot2)
library(GGally)
library(devtools) # for ggbiplot
library(ggbiplot)
traindir <- "C:/Users/jgh6ds/Desktop/Independent/Sessions 2-5 Data and Visualization/TrainData"
acts <- file.inputl(traindir)
totacts <- combine.data(acts)
##Build a data frame with only extreme accidents for ACCDMG
dmgbox <-boxplot(totacts$ACCDMG)
ggplot(as.data.frame(totacts$ACCDMG), aes(x=totacts$ACCDMG)) +
geom_boxplot(col= "steelblue") + theme(plot.title = element_text(hjust = 0.5)) + coord_flip()
xdmg <- totacts[totacts$ACCDMG > dmgbox$stats[5],]
## Remove duplicates from xdmg and call new data frame xdmgnd
xdmgnd <- xdmg[!(duplicated(xdmg[, c("INCDTNO", "YEAR", "MONTH", "DAY", "TIMEHR", "TIMEMIN")])),]
# Setup categorical variables
xdmgnd$Cause <- rep(NA, nrow(xdmgnd))
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "M")] <- "M"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "T")] <- "T"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "S")] <- "S"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "H")] <- "H"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "E")] <- "E"
# This new variable, Cause, has to be a factor
xdmgnd$Cause <- factor(xdmgnd$Cause)
xdmgnd$Type <- factor(xdmgnd$TYPE, labels = c("Derailment", "HeadOn", "Rearend", "Side", "Raking", "BrokenTrain", "Hwy-Rail", "GradeX", "Obstruction", "Explosive", "Fire","Other","SeeNarrative"))
#***********************************************************
#  	Possible predictors of damage
#***********************************************************
# SPM
#Scatter plot matricies for quantitative predictors and single metric.
source("SPM_Panel.R")
#
#
#	 Multiple Linear Regression 1
#
#******************************************************
##load data
sourcedir <- "C:/Users/jgh6ds/Desktop/Independent/Session 9-12 Multiple Linear Regression"
setwd(sourcedir)
source("AccidentInput.R")
#load libraries
library(ggplot2)
library(GGally)
library(devtools) # for ggbiplot
library(ggbiplot)
traindir <- "C:/Users/jgh6ds/Desktop/Independent/Sessions 2-5 Data and Visualization/TrainData"
acts <- file.inputl(traindir)
totacts <- combine.data(acts)
##Build a data frame with only extreme accidents for ACCDMG
dmgbox <-boxplot(totacts$ACCDMG)
ggplot(as.data.frame(totacts$ACCDMG), aes(x=totacts$ACCDMG)) +
geom_boxplot(col= "steelblue") + theme(plot.title = element_text(hjust = 0.5)) + coord_flip()
xdmg <- totacts[totacts$ACCDMG > dmgbox$stats[5],]
## Remove duplicates from xdmg and call new data frame xdmgnd
xdmgnd <- xdmg[!(duplicated(xdmg[, c("INCDTNO", "YEAR", "MONTH", "DAY", "TIMEHR", "TIMEMIN")])),]
# Setup categorical variables
xdmgnd$Cause <- rep(NA, nrow(xdmgnd))
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "M")] <- "M"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "T")] <- "T"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "S")] <- "S"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "H")] <- "H"
xdmgnd$Cause[which(substr(xdmgnd$CAUSE, 1, 1) == "E")] <- "E"
# This new variable, Cause, has to be a factor
xdmgnd$Cause <- factor(xdmgnd$Cause)
xdmgnd$Type <- factor(xdmgnd$TYPE, labels = c("Derailment", "HeadOn", "Rearend", "Side", "Raking", "BrokenTrain", "Hwy-Rail", "GradeX", "Obstruction", "Explosive", "Fire","Other","SeeNarrative"))
#***********************************************************
#  	Possible predictors of damage
#***********************************************************
# SPM
#Scatter plot matricies for quantitative predictors and single metric.
source("SPM_Panel.R")
uva.pairs(xdmgnd[,c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")])
ggpairs(xdmgnd[,c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")])
# PCA
# Principal components with the correlation matrix for extreme data with 1 metric and quantitative predictors.
source("PCAplots.R")
pred.pca <- princomp(xdmgnd[,c("ACCDMG", "TRNSPD", "CARS", "TIMEHR", "TEMP")], cor = T )
biplot(pred.pca)
## Which predictors are most correlated with accident damage?
###############################
# Categorical plots
# heatmap
source("http://www.phaget4.org/R/myImagePlot.R")
myImagePlot(table(xdmgnd$Cause, xdmgnd$Type), title = "No. of Accidents by Cause and Type of Accident")
## Which accident causes and types have the highest numbers of extreme accidents?
# Type & TRNSPD
library(lattice)
xyplot(log(ACCDMG)~TRNSPD | Type, data = xdmgnd, type = c("p", "r"))
qplot(TRNSPD, log(ACCDMG), data = xdmgnd) +  geom_point() +
geom_smooth(method = "lm", se = FALSE) + facet_wrap(~ Type, scales = "free")
# Cause & TRNSPD
xyplot(log(ACCDMG)~TRNSPD | Cause, data = xdmgnd, type = c("p", "r"))
qplot(TRNSPD, log(ACCDMG), data = xdmgnd) +  geom_point() +
geom_smooth(method = "lm", se = FALSE) + facet_wrap(~ Cause, scales = "free")
##What is notable about the relationship between train speed and accident
##damages for different accident causes and types?
#More complex xyplots
# Cause X Type and TRNSPD
xyplot(log(ACCDMG)~TRNSPD | Cause * Type, data = xdmgnd, type = c("p", "r"))
qplot(log(ACCDMG), TRNSPD, data = xdmgnd) +  geom_point() +
geom_smooth(method = "lm", se = FALSE) + facet_wrap(~ Cause * Type, scales = "free")
# Create the Derail variable &
# then look at interactions with Cause
xdmgnd$Derail <- (xdmgnd$Type == "Derailment")
# plot xy with interactions of Derail and Cause
xyplot(log(ACCDMG)~TRNSPD | Cause * Derail, data = xdmgnd, type = c("p", "r"))
qplot(log(ACCDMG), TRNSPD, data = xdmgnd) +  geom_point() +
geom_smooth(method = "lm", se = FALSE) + facet_wrap(~ Cause * Derail, scales = "free")
# Create a Freight variable
xdmgnd$Freight <- (xdmgnd$TYPEQ == 1)
# Interaction plots
# Plot interaction between Derailment and Cause
interaction.plot(xdmgnd$Derail, xdmgnd$Cause,log(xdmgnd$ACCDMG))
ggplot() +
aes(x = xdmgnd$Derail, y = log(xdmgnd$ACCDMG), group = xdmgnd$Cause, color = xdmgnd$Cause) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun = mean, geom = "line")
# Interaction plots with quantitative variables
Speed <- cut(xdmgnd$TRNSPD, c(min(xdmgnd$TRNSPD),15,max(xdmgnd$TRNSPD)), include.lowest = T, labels = c("low speed", "high speed"))
Cars <- cut(xdmgnd$CARS, c(min(xdmgnd$CARS),1,max(xdmgnd$CARS)), include.lowest = T, labels = c("low hzd", "high hzd"))
Tons <- cut(xdmgnd$TONS, c(min(xdmgnd$TONS),median(xdmgnd$TONS),max(xdmgnd$TONS)), include.lowest = T, labels = c("low tons", "high tons"))
# Plot interaction between Speed and Cars
interaction.plot(Speed, Cars, log(xdmgnd$ACCDMG))
# First option with seeing points
qplot(x = TRNSPD, y = log(ACCDMG), data = xdmgnd, colour = Cars) +
geom_point(colour = "gray")+
geom_smooth(method = "lm")
# Second option without points
ggplot() +
aes(x = Speed, y = log(xdmgnd$ACCDMG), group = Cars, color = Cars) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")
# Plot interaction between Freight and Speed
interaction.plot(xdmgnd$Freight, Speed, log(xdmgnd$ACCDMG))
ggplot() +
aes(x = xdmgnd$Freight, y = log(xdmgnd$ACCDMG), group = Speed, color = Speed) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")
# Plot interaction between Derailments and Speed
interaction.plot(xdmgnd$Derail, Speed, log(xdmgnd$ACCDMG))
ggplot() +
aes(x = xdmgnd$Derail, y = log(xdmgnd$ACCDMG), group = Speed, color = Speed) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")
# Plot interaction between Tons and Speed
interaction.plot(Speed, Tons, log(xdmgnd$ACCDMG))
ggplot() +
aes(x = Speed, y = log(xdmgnd$ACCDMG), group = Tons, color = Tons) +
stat_summary(fun.y = mean, geom = "point") +
stat_summary(fun.y = mean, geom = "line")
## How might these results inform your hypotheses?
## Use the multivariate visualizations as evidence to form at least 1 hypothesis.
####################################
# Linear Models
####################################
# Build linear regression models with different combinations of quantitative predictors to provide evidence for your hypothesis
# Single predictor
xdmgnd.lm1<-lm(ACCDMG~TEMP,data=xdmgnd)
summary(xdmgnd.lm1)
names(xdmgnd.lm1)
coef(xdmgnd.lm1)
sum(xdmgnd.lm1$res^2)
# Two predictors
xdmgnd.lm2<-lm(ACCDMG~TEMP+TRNSPD,data=xdmgnd)
summary(xdmgnd.lm2)
names(xdmgnd.lm2)
coef(xdmgnd.lm2)
#Three predictors
xdmgnd.lm3<-lm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd)
summary(xdmgnd.lm3)
coef(xdmgnd.lm3)
# Interpret your model coefficients.  Do they make sense?
# Interpret your developed models using the model utility test and t-test.
# Write out the null and alternative hypothesis for each of the tests.
# Do you reject or fail to reject H0 for each test?
####################################
#	Now repeat for TOTKLD + TOTINJ
####################################
#
#
#			Multiple Linear Regression
#	 Metrics & Variable Selection
#  Diagnostics & Transformations
#******************************************************
traindir <- "C:/Users/jgh6ds/Desktop/Independent/Sessions 2-5 Data and Visualization/TrainData"
sourcedir <- "C:/Users/jgh6ds/Desktop/Independent/Session 9-12 Multiple Linear Regression"
library(here)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(ggfortify)
library(MASS)
library(lindia)
library(olsrr)
#load data
setwd(sourcedir)
source("AccidentInput.R")
# you should have two data structures in working memory
# First - a list of data frames for each year of accident data
acts <- file.inputl(traindir)
sapply(acts, dim)
#Load data and combine data from 2001-2020 into totacts
totacts <- combine.data(acts)
# Build a data frame xdmg with only extreme accidents for ACCDMG
dmgbox <-boxplot(totacts$ACCDMG)
ggplot(as.data.frame(totacts$ACCDMG), aes(x=totacts$ACCDMG)) +
geom_boxplot(col= "steelblue") + theme(plot.title = element_text(hjust = 0.5)) + coord_flip()
xdmg <- totacts[totacts$ACCDMG > dmgbox$stats[5],]
## Remove 9/11
xdmg <- xdmg[-185,]
# Remove duplicates from xdmg and call new data frame xdmgnd
xdmgnd <- xdmg[!(duplicated(xdmg[, c("INCDTNO", "YEAR", "MONTH", "DAY", "TIMEHR", "TIMEMIN")])),]
## Reset rownames (observation #s) for sequential numbering-
## otherwise they will remain the #s from totacts
rownames(xdmgnd) <- NULL
#Build linear regression models in R: lm
xdmgnd.lm1<-lm(ACCDMG ~ TEMP + TRNSPD + CARS + HEADEND1,data=xdmgnd)
xdmgnd.lm2<-lm(ACCDMG ~ TEMP + TRNSPD + CARS, data=xdmgnd)
##Display regression results for each model
summary(xdmgnd.lm1)
summary(xdmgnd.lm2)
##You should be able to find: estimated coefficients, residuals, t-test results, F test results, R^2, adjusted R^2,
names(xdmgnd.lm1)
names(summary(xdmgnd.lm1))
##What are the coefficients of each of the linear models?
coef(xdmgnd.lm1)
##what is the sum of the residuals squared?
sum(xdmgnd.lm1$res^2)
##Metrics and Variable Selection
##Criterion based assessments
##Adjusted R^2:
summary(xdmgnd.lm1)$adj.r.squared
##AIC:
AIC(xdmgnd.lm1)
AIC(xdmgnd.lm2)
##BIC:
BIC(xdmgnd.lm1)
BIC(xdmgnd.lm2)
##Variable Selection
#Forward selection
intercept.model <- lm(ACCDMG ~ 1, data=xdmgnd)
summary(intercept.model)
full.model.formula <- formula(lm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1, data=xdmgnd))
xdmgnd.lm1.fwd<-step(intercept.model, direction='forward',
scope=full.model.formula, trace=T)
summary(xdmgnd.lm1.fwd)
AIC(xdmgnd.lm1.fwd)
#Backward selection
xdmgnd.lm1.bwd<-step(xdmgnd.lm1, direction='backward', trace=T)
summary(xdmgnd.lm1.bwd)
AIC(xdmgnd.lm1.bwd)
#Stepwise Regression
##If you have many predictors, it will take some time to get results. To save time, you can set 'trace=F' to get results without showing each step:
xdmgnd.lm1.step<-step(xdmgnd.lm1, direction='both', trace=T)
summary(xdmgnd.lm1.step)
AIC(xdmgnd.lm1.step)
#Partial F Test
##Recall that we can only compare two nested models by partial F test:
anova(xdmgnd.lm1,xdmgnd.lm2)
anova(xdmgnd.lm1,xdmgnd.lm1.fwd)
anova(xdmgnd.lm1,xdmgnd.lm1.bwd)
anova(xdmgnd.lm1,xdmgnd.lm1.step)
# Test Sets
##Source TestSet.R
source("TestSet.R")
##set test sets size:
test.size<-1/3
##generate training sets and test sets from original data:
xdmgnd.data<-test.set(xdmgnd,test.size)
names(xdmgnd.data)
##Check distribution of ACCDMG of test set, training set:
#2 different plotting methods
##method 1
par(mfrow=c(2,2))
hist(xdmgnd.data$train$ACCDMG)
hist(xdmgnd.data$test$ACCDMG)
hist(xdmgnd$ACCDMG)
par(mfrow=c(1,1))
##method 2 with ggplot
a <- ggplot(as.data.frame(xdmgnd.data$train$ACCDMG), aes(xdmgnd.data$train$ACCDMG)) + geom_histogram()
b <- ggplot(as.data.frame(xdmgnd.data$test$ACCDMG), aes(xdmgnd.data$test$ACCDMG)) + geom_histogram()
c <- ggplot(as.data.frame(xdmgnd$ACCDMG), aes(xdmgnd$ACCDMG)) + geom_histogram()
ggarrange(a,b,c, ncol=2, nrow = 2)
##Build models with training set:
xdmgnd.lm1.train<-lm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd.data$train)
xdmgnd.lm2.train<-lm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd.data$train)
##Recall that we need to measure predicted MSE.
##First, how to predict with lm models:
xdmgnd.lm1.pred<-predict(xdmgnd.lm1.train,newdata=xdmgnd.data$test)
xdmgnd.lm2.pred<-predict(xdmgnd.lm2.train,newdata=xdmgnd.data$test)
##Next, compute PMSE:
pmse.xdmgnd.lm1<-mse(xdmgnd.lm1.pred,xdmgnd.data$test$ACCDMG)
pmse.xdmgnd.lm1
pmse.xdmgnd.lm2<-mse(xdmgnd.lm2.pred,xdmgnd.data$test$ACCDMG)
pmse.xdmgnd.lm2
##Which model is better based on PMSE?
#Version 2 Test Sets- Run multiple iterations with different testing and training sets
##create vectors to store PMSE
pmse1.result<-NULL;
pmse2.result<-NULL;
for (i in c(1:20)){
#set test sets size:
test.size<-1/3
# generate training sets and test sets from original data:
xdmgnd.data<-test.set(xdmgnd,test.size)
# Build model with train set:
lm1.train<-lm(ACCDMG ~ TEMP + TRNSPD + CARS + HEADEND1,data=xdmgnd.data$train)
lm2.train<-lm(ACCDMG ~ TEMP + TRNSPD + CARS,data=xdmgnd.data$train)
# First, how to predict with lm models:
lm1.pred<-predict(lm1.train,newdata=xdmgnd.data$test)
lm2.pred<-predict(lm2.train,newdata=xdmgnd.data$test)
# Next, compute PMSE:
pmse.lm1<-mse(lm1.pred,xdmgnd.data$test$ACCDMG)
pmse.lm2<-mse(lm2.pred,xdmgnd.data$test$ACCDMG)
# Add the PMSE for this run into your vector to stor PMSE
pmse1.result<-c(pmse1.result,pmse.lm1)
pmse2.result<-c(pmse2.result,pmse.lm2)
}
##Compare models based over 20 runs of PMSE
#Plot results method 1
plot(pmse1.result,type='b',col='blue',xlab="Index", ylab="PMSE")
lines(pmse2.result,type='b',col='red')
title(main="Model Comparison Based on PMSE")
#Plot results method 2 with ggplot
Index <- 1:length(pmse1.result);
df <- data.frame(Index,pmse1.result,pmse2.result)
ggplot(data=df, aes(x=Index)) +
geom_line(aes(y = pmse1.result), color = 'blue', size = 1) +
geom_line(aes(y = pmse2.result), color = 'red', linetype = 'twodash', size = 1) +
ggtitle("Model Comparison Based on PMSE") +
theme(plot.title = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5))
##Which model is better from visual inspection of graph?
#We can also use statistical tests to compare our models.
#Paired t test:
t.test(pmse1.result,pmse2.result,paired=T)
##Wilcoxon Test:
wilcox.test(pmse1.result,pmse2.result,paired=T)
##Which model performs better based on the paired t test and paired Wilcoxon test?
mean(pmse1.result)
mean(pmse2.result)
# Model 1 has a statistically lower mean pmse and
# is therefore the preferred model
# Cross-Validation
##Need the boot library
library(boot)
##You need to use glm (a function to estimate generalized linear model) instead of lm.
##Don't be confused by generalized linear models. Because lm is a special case of glm, glm
##function can be used to estimate lm models as long as you set parameters correctly.
xdmgnd.lm1.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd)
xdmgnd.lm2.cv<-glm(ACCDMG~TEMP+TRNSPD+CARS,data=xdmgnd)
##Cross-validation error
xdmgnd.lm1.err<-cv.glm(xdmgnd,xdmgnd.lm1.cv,K=10)
xdmgnd.lm1.err$delta
xdmgnd.lm2.err<-cv.glm(xdmgnd,xdmgnd.lm2.cv,K=10)
xdmgnd.lm2.err$delta
##There are two components for estimated errors: the first is the raw cross-validation estimate of prediction error; the second is the adjusted cross-validation estimate.
##Compare xdmgnd.lm2 and xdmgnd.lm3 based on adjusted cross-validation estimate.  Which model performs better?
# Diagnostics Plot
##Generate diagnostics plot one by one
# Optional: All the diagnostic plots together with lindia package
gg_diagnose(xdmgnd.lm1)
#with autoplot
autoplot(xdmgnd.lm1, which=1:6, label.size = 3) + theme_bw()
autoplot(xdmgnd.lm1, which = c(1,2,3,5), ncol = 2, label.size = 3) + theme_bw()
#Plot graphs individually
autoplot(xdmgnd.lm1,which=1, ncol = 1, label.size = 3) + theme_bw()#Residual vs. Fitted
autoplot(xdmgnd.lm1,which=2, ncol = 1, label.size = 3) + theme_bw() #QQ
autoplot(xdmgnd.lm1,which=3, ncol = 1, label.size = 3) + theme_bw() #Scale-Location
autoplot(xdmgnd.lm1, which=4, ncol = 1, label.size = 3) + theme_bw() #Cook's distance
autoplot(xdmgnd.lm1,which=5,ncol = 1, label.size = 3) + theme_bw() #Redisuals vs. Leverage
autoplot(xdmgnd.lm1,which=6, ncol = 1, label.size = 3) + theme_bw() #Cook's dist vs. Leverage
#What happened in each of the accidents noted on the Cook's Distance plot?
##What do you observe in each diagnostic plot for xdmgnd.lm1?  Discuss your observations and any issues.
##a. residuals vs. fitted
##b. qq-plot
##c. Scale-Location?
##d. Cook's distance / Residuals vs. Leverage?
# Are the residuals homoscedastic
ols_test_breusch_pagan(xdmgnd.lm1)
#Transformations
##Let's take a look at the response variable ACCDMG.
ggplot(as.data.frame(xdmgnd$ACCDMG), aes(xdmgnd$ACCDMG)) + geom_density()
##Do we violate the distributional assumption of our response variable?
#Box-Cox Transformation
boxcox(xdmgnd.lm1) #box-cox plot
#with ggplot
gg_boxcox(xdmgnd.lm1)
boxcox(xdmgnd.lm1, plotit=T, lambda=seq(-2,2,by=0.5))
##get x and y values without plotting
boxcox(xdmgnd.lm1,plotit=F)
##find y value for maximum lambda
max(boxcox(xdmgnd.lm1, plotit = F)$y)
## find best lamda value
boxcox(xdmgnd.lm1, plotit = F)$x[which.max(boxcox(xdmgnd.lm1, plotit = F)$y)]
##The best lambda and store in L
L<-boxcox(xdmgnd.lm1, plotit = F)$x[which.max(boxcox(xdmgnd.lm1, plotit = F)$y)]
L
##The model with the best lamda transformation
xdmgnd.lm1.boxcox<-lm((ACCDMG^L-1)/L~TEMP+TRNSPD+CARS+HEADEND1,data=xdmgnd)
##Display regression results for boxcox model
summary(xdmgnd.lm1)
summary(xdmgnd.lm1.boxcox)
##Let's replot our density function for our response variable ACCDMG
plot(density((xdmgnd$ACCDMG^L-1)/L))
ggplot(as.data.frame((xdmgnd$ACCDMG^L-1)/L), aes((xdmgnd$ACCDMG^L-1)/L)) + geom_density()
##Plot diagnostic for your new model xdmgnd.lm1.boxcox
autoplot(xdmgnd.lm1.boxcox, which = c(1,2,3,5), ncol = 2, label.size = 3) + theme_bw()
##What do you observe in the diagnostic plots for your new model xdmgnd.lm1.boxcox?  Did the transformation help?
# Are the residuals homoscedastic?
ols_test_breusch_pagan(xdmgnd.lm1.boxcox)
## Now, let's try a logarithm transform of the response variable ACCDMG.
plot((density(log(xdmgnd$ACCDMG))))
#with ggplot
ggplot(as.data.frame(log(xdmgnd$ACCDMG)), aes(log(xdmgnd$ACCDMG))) + geom_density()
## Build a new model with log(ACCDMG) as the response
## Plot diagnostics for your new model xdmgnd.lm1.log
## What do you observe in the diagnostic plots for your new model xdmgnd.lm1.log?  Which trasformation do you choose?
